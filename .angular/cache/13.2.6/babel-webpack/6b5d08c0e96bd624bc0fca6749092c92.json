{"ast":null,"code":"import { CaddyItem } from '../model/CaddyItem.model';\nimport { Caddy } from '../model/Caddy.model';\nimport * as i0 from \"@angular/core\";\nexport let CaddyService = /*#__PURE__*/(() => {\n  class CaddyService {\n    constructor() {\n      //le nom du caddy sélectionné par le client\n      this._currentCaddyName = \"Caddy\"; //collection des caddies crées par le client\n\n      this._caddies = new Map(); // recuperer les caddies stockées en localSotrage. Si aucun caddy existe, créer un par défaut avec currentCaddyName\n\n      if (this.loadAndGetCaddiesFromLocalStorage()) {\n        this.caddies = this.loadAndGetCaddiesFromLocalStorage(); // convertir de string a JSON\n      } else {\n        // creer un caddy par defaut lors du demarrage du service et l'ajouter au Map\n        let defaultCaddy = new Caddy(this.currentCaddyName);\n        this.caddies.set(this.currentCaddyName, defaultCaddy);\n      } // console.log(\"constructor().caddies\");\n      // console.log(this.caddies);\n\n    }\n\n    addProductToCaddy(addedProduct) {\n      // specifications fonctionnelles\n\n      /* un client peut posséder plusieurs caddies, pr ajouter un caddyItem, il faut le faire ds le caddy courant.\n       - step1: recuperer le caddy courant\n       - step2: avant d'ajouter ds le caddy courant, il faut tt d'abord chercher si le caddyItem existe deja ds le caddy.\n         Si oui, on va juste maj caddyItemQuantity. Si le caddyItem n'existe pas ds le caddy on va l'ajouter.\n         Noter bien qu'un caddyItem est associé a un Product. Par conséquent, un caddyItem est\n         identifié par le même ID/Ref que le Product y associé. De ce fait, la recherche d'un\n         caddyItem ds un caddy, se fait via productId.\n       - step3:\n      */\n      let currentCaddy = this.caddies.get(this.currentCaddyName);\n\n      if (currentCaddy) {\n        let currentCaddyItem = currentCaddy.caddyItems.get(addedProduct.id);\n\n        if (currentCaddyItem) {\n          currentCaddyItem.purchasedQuantity += addedProduct.orderedQuantity;\n        } else {\n          currentCaddyItem = new CaddyItem(addedProduct, addedProduct.currentPrice, addedProduct.orderedQuantity);\n          currentCaddy.caddyItems.set(addedProduct.id, currentCaddyItem);\n        }\n\n        this.saveCaddiesToLocalStorage();\n      }\n    }\n\n    getCurrentCaddy() {\n      return this.caddies.get(this.currentCaddyName);\n    }\n\n    setCustomer(caddyCustomer) {\n      this.getCurrentCaddy().customer = caddyCustomer;\n    }\n\n    getTotalAmountOfCurrentCaddy() {\n      var _a;\n\n      let totalAmount = 0;\n      (_a = this.getCurrentCaddy()) === null || _a === void 0 ? void 0 : _a.caddyItems.forEach(caddyItem => {\n        totalAmount += caddyItem.buyingPrice * caddyItem.purchasedQuantity;\n      });\n      return totalAmount;\n    } // enregistrer les caddies ds le localSotrage à chaque fois que j'ajoute un product au caddy\n\n\n    saveCaddiesToLocalStorage() {\n      // localStorage permet d'enregistrer les string seulement, alors on doit serialiser la map caddies \n      localStorage.setItem('myCaddies', JSON.stringify(this.caddies, this.replacer));\n    }\n\n    loadAndGetCaddiesFromLocalStorage() {\n      return JSON.parse(localStorage.getItem('myCaddies'), this.reviver);\n    } // vider le caddy courant\n\n\n    emptyCurrentCaddy() {\n      var _a;\n\n      (_a = this.getCurrentCaddy()) === null || _a === void 0 ? void 0 : _a.caddyItems.clear();\n    } // fonction requise pr serialiser la map caddies via JSON.stringify()\n\n\n    replacer(key, value) {\n      if (value instanceof Map) {\n        return {\n          dataType: 'Map',\n          value: Array.from(value.entries()) // or with spread: value: [...value]\n\n        };\n      } else {\n        return value;\n      }\n    } // fonction requise pr deserialiser la map caddies via JSON.parse()\n\n\n    reviver(key, value) {\n      if (typeof value === 'object' && value !== null) {\n        if (value.dataType === 'Map') {\n          return new Map(value.value);\n        }\n      }\n\n      return value;\n    }\n\n    get currentCaddyName() {\n      return this._currentCaddyName;\n    }\n\n    set currentCaddyName(value) {\n      this._currentCaddyName = value;\n    }\n\n    get caddies() {\n      return this._caddies;\n    }\n\n    set caddies(value) {\n      this._caddies = value;\n    }\n\n  }\n\n  CaddyService.ɵfac = function CaddyService_Factory(t) {\n    return new (t || CaddyService)();\n  };\n\n  CaddyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CaddyService,\n    factory: CaddyService.ɵfac,\n    providedIn: 'root'\n  });\n  return CaddyService;\n})();","map":null,"metadata":{},"sourceType":"module"}