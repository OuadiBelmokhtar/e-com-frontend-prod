{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { GlobalService } from './global.service';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    /*\n      private users = [\n        { username: 'admin', password: '1234', roles: ['ADMIN', 'USER'] },\n        { username: 'user1', password: '1234', roles: ['USER'] },\n        { username: 'user2', password: '1234', roles: ['USER'] }\n      ];\n    */\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.username = \"\";\n      this.roles = [];\n    } // AuthenticationService.login()\n\n\n    login(user) {\n      this.httpClient.post(GlobalService.HOST + \"/login\", user).subscribe(response => {\n        this._jwtAuthToken = response;\n        this.saveJwtAuthTokenToLocalStorage();\n        console.log(\"this.authToken after save\");\n        console.log(this._jwtAuthToken);\n        this.parseJwtAuthTokenAndInitUsernameRoles();\n\n        if (this.isAuthenticated()) {\n          this.router.navigateByUrl('frontoffice-products-grid/1/0'); // naviguer vers les products selectionnes\n          //let currentUrl=this.router.url;\n          //this.router.navigateByUrl('/', {skipLocationChange:true}).then(()=>{this.router.navigate(['frontoffice-products-grid/1/0'])});\n\n          location.reload(); // recharger la page\n        }\n      }, err => {\n        console.log(err);\n      });\n    }\n    /*\n      loginWithStaticArray(username: string, password: string) {\n        let foundUser;\n        this.users.forEach(user => {\n          if (user.username == username && user.password == password) {\n            foundUser = user;\n          }\n        });\n        if (foundUser) {\n          // retenir l'utilisateur authentifié\n          this.authenticatedUser = foundUser;\n          this.isAuthenticated = true;\n          // créer un token pr le sauvegarder ds localStorage\n          // convertir authenticatedUser de JSON à string\n          this.token = btoa(JSON.stringify({ 'username': this.authenticatedUser.username, 'roles': this.authenticatedUser.roles }));\n        } else {\n          this.authenticatedUser = undefined;\n          this.isAuthenticated = false;\n          this.token = undefined;\n          console.log(\"Username ou password incorrects!\");\n        }\n      }\n    */\n\n\n    saveJwtAuthTokenToLocalStorage() {\n      if (this._jwtAuthToken) localStorage.setItem('jwtAuthToken', btoa(JSON.stringify(this._jwtAuthToken)));\n    } // invoqué ds AppComponent.ngOnInit() lors d'actualisation de la page\n\n\n    loadAndGetJwtAuthTokenFromLocalStorage() {\n      let encodedToken = localStorage.getItem('jwtAuthToken'); //console.log(\"lToken\");\n      // console.log(lToken);\n\n      if (encodedToken) {\n        // convertir de string à JSON\n        let decodedToken = JSON.parse(atob(encodedToken)); // extraire username+roles seulement, vu que generalement un token contient autres infos (date expiration, ...)\n\n        this._jwtAuthToken = decodedToken;\n        return this._jwtAuthToken;\n      }\n    } // Extract and get access-token from authToken\n\n\n    getJwtAccessToken() {\n      console.log(\"**getAccessToken()\");\n      let authToken = this.loadAndGetJwtAuthTokenFromLocalStorage();\n      let accessToken = authToken['access-token'];\n      console.log(\"getAccessToken().access-token\");\n      console.log(accessToken);\n      return accessToken;\n    } // Extract and get refresh-token from authToken\n\n\n    getJwtRefreshToken() {\n      let authToken = this.loadAndGetJwtAuthTokenFromLocalStorage();\n      console.log(\"refresh-token\");\n      console.log(authToken['refresh-token']);\n      return authToken['refresh-token'];\n    } // invoqué au moment du login() pour initialiser les vars this.username et this.roles des le login()\n    // Noter bien que pour recuperer le contenu du jwtToken on a pas besoin du secret. Ce dernier est requis \n    // seulment ds le backend pr vérifier la validité du token via la signature.\n\n\n    parseJwtAuthTokenAndInitUsernameRoles() {\n      let rawJwtAccessToken = this.getJwtAccessToken();\n      let jwtHelper = new JwtHelperService();\n      let decodedJwtAccessToken = jwtHelper.decodeToken(rawJwtAccessToken);\n      this.username = decodedJwtAccessToken.sub; // recup le claim standard subject\n\n      this.roles = decodedJwtAccessToken.roles; // recup le claim roles\n\n      console.log(\"parseJwtAuthToken().username\");\n      console.log(this.username);\n      console.log(\"parseJwtAuthToken().roles\");\n      console.log(this.roles);\n    }\n\n    sendRefreshTokenAndGetNewAccessToken() {\n      let refreshToken = this.getJwtRefreshToken();\n      let authorizationHeader = new HttpHeaders({\n        'Authorization': 'Bearer ' + refreshToken\n      });\n      return this.httpClient.get(GlobalService.HOST + \"/refreshToken\", {\n        headers: authorizationHeader\n      });\n    }\n\n    isJwtExpired() {\n      let rawJwtAccessToken = this.getJwtAccessToken();\n      let jwtHelper = new JwtHelperService();\n      return jwtHelper.isTokenExpired(rawJwtAccessToken);\n    }\n\n    isAdmin() {\n      let isAdmin = false;\n\n      if (this.username && this.roles) {\n        isAdmin = this.roles.indexOf('ADMIN') > -1;\n      }\n\n      return isAdmin;\n    }\n\n    isUser() {\n      let isUser = false;\n\n      if (this.username && this.roles) {\n        isUser = this.roles.indexOf('USER') > -1;\n      }\n\n      return isUser;\n    }\n\n    isAuthenticated() {\n      let isUserAuthenticated = false;\n\n      if (this.username) {\n        isUserAuthenticated = true;\n      }\n\n      return isUserAuthenticated;\n    } // invoquer ds AppComponent.onLgout()\n\n\n    removeJwtAuthTokenFromLocalStorage() {\n      // Supprimer le token du localStorage si existe. Sinon, on fait rien\n      localStorage.removeItem('jwtAuthToken');\n    }\n\n    logout() {\n      this.removeJwtAuthTokenFromLocalStorage();\n      this._jwtAuthToken = undefined;\n      this.username = undefined;\n      this.roles = undefined;\n    }\n\n    get jwtAuthToken() {\n      return this._jwtAuthToken;\n    }\n\n    set jwtAuthToken(value) {\n      this._jwtAuthToken = value;\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}