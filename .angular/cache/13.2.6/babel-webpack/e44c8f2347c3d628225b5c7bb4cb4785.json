{"ast":null,"code":"import { Order } from '../model/Order.model';\nimport { HttpHeaders } from '@angular/common/http';\nimport { GlobalService } from './global.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./caddy.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./authentication.service\";\nexport let OrderService = /*#__PURE__*/(() => {\n  class OrderService {\n    constructor(caddyService, httpClient, authService) {\n      this.caddyService = caddyService;\n      this.httpClient = httpClient;\n      this.authService = authService;\n      this.order = new Order(); // il faut l insctancier, sinon il va avoir undefined lors de la manipualtion ds d'autres components\n    }\n\n    setCustomer(customer) {\n      this.order.customer = customer;\n    } // charger les caddyItem de getCurrentCaddy() ds order.orderedProducts\n\n\n    loadProductsFromCurrentCaddyToOrder() {\n      var _a;\n\n      this.order.orderedProducts = new Array();\n      (_a = this.caddyService.getCurrentCaddy()) === null || _a === void 0 ? void 0 : _a.caddyItems.forEach(caddyItem => {\n        this.order.orderedProducts.push(caddyItem);\n      }); // for(let caddyItemKey in this.caddyService.getCurrentCaddy()?.caddyItems.keys()){\n      //   this.order.orderedProducts.push(this.caddyService.getCurrentCaddy()?.caddyItems.get(caddyItemKey)!);\n      // }\n    }\n\n    submitAndSaveOrder() {\n      /* noter bien que l'objet this.order envoyé ds la requete contient :\n       - this.order.customer les infos sur le customer, initialisées ds customer.component.ts.onSaveCustomerInfos()\n       - this.order.orderedProducts: les products existent ds le panier et chargés ds this.loadProductsFromCurrentCaddyToOrder()\n      */\n      return this.httpClient.post(GlobalService.HOST + \"/orders\", this.order, {\n        headers: new HttpHeaders({\n          'Authorization': \"Bearer \" + this.authService.getJwtAccessToken()\n        })\n      });\n    }\n\n    getOrder(id) {\n      return this.httpClient.get(GlobalService.HOST + \"/orders/\" + id, {\n        headers: new HttpHeaders({\n          'Authorization': \"Bearer \" + this.authService.getJwtAccessToken()\n        })\n      });\n    }\n\n  }\n\n  OrderService.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.CaddyService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.AuthenticationService));\n  };\n\n  OrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrderService;\n})();","map":null,"metadata":{},"sourceType":"module"}